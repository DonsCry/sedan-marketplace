version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: sedan-postgres
    environment:
      POSTGRES_USER: sedan_user
      POSTGRES_PASSWORD: sedan_password
      POSTGRES_DB: sedan_marketplace
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U sedan_user -d sedan_marketplace']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: sedan-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sedan-backend
    environment:
      DATABASE_URL: postgresql://sedan_user:sedan_password@postgres:5432/sedan_marketplace?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-this-in-production
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      PORT: 5000
      NODE_ENV: production
      FRONTEND_URL: http://localhost:3000
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
    ports:
      - '5000:5000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: sh -c "npx prisma migrate deploy && node dist/server.js"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sedan-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
    ports:
      - '3000:3000'
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:
